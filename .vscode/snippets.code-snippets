{
	"RN Component": {
		"prefix": "jh-rnc",
		"body": [
			"import React from 'react'",
			"import { View, Text, Button, StyleSheet } from 'react-native'",
			"",
			"export default function ${1:${TM_FILENAME_BASE}}(props) {",
			"  return (",
			"    <View>",
			"",
			"    </View>",
			"  )",
			"}",
			"",
			"const styles = StyleSheet.create({",
			"",
			"});"
		],
		"description": "React Native Component"
	},
	"RN Stack-Navigator": {
		"prefix": "jh-rnsn",
		"body": [
			"import React from 'react'",
			"import { StyleSheet } from 'react-native'",
			"import { createStackNavigator } from '@react-navigation/stack';",
			"// Import Screens",
			"",
			"const Stack = createStackNavigator();",
			"",
			"export default function ${1:${TM_FILENAME_BASE}}() {",
			"  return (",
			"    <Stack.Navigator initialRouteName='${2:StackScreen1}' screenOptions={{ headerShown: false }}>",
			"      <Stack.Screen",
			"        name='${2:StackScreen1}'",
			"        component={${3:StackScreen1}}",
			"      />",
			"      <Stack.Screen",
			"        name='${5:StackScreen1}'",
			"        component={${6:StackScreen1}}",
			"      />",
			"      <Stack.Screen",
			"        name='${8:StackScreen1}'",
			"        component={${9:StackScreen1}}",
			"      />",
			"    </Stack.Navigator>",
			"  );",
			"}",
			"",
			"const styles = StyleSheet.create({",
			"",
			"});"
		],
		"description": "React Native Stack Navigator"
	},
	"RN Tab-Navigator": {
		"prefix": "jh-rntn",
		"body": [
			"import React from 'react'",
			"import { View, Text, Button, StyleSheet } from 'react-native'",
			"import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';",
			"import { createMaterialBottomTabNavigator } from 'react-native-paper/react-navigation';",
			"import { MaterialIcons } from '@expo/vector-icons';",
			"import { MaterialCommunityIcons } from '@expo/vector-icons';",
			"// Import Screens",
			"",
			"//const Tab = createBottomTabNavigator();",
			"const Tab = createMaterialBottomTabNavigator();",
			"",
			"export default function ${1:${TM_FILENAME_BASE}}() {",
			"  return (",
			"    <Tab.Navigator>",
			"      <Tab.Screen",
			"        name='${2:TabScreen1}'",
			"        component={${3:TabScreen1}}",
			"        options={{",
			"          tabBarLabel: '${2:TabScreen1}',",
			"          tabBarIcon: ({ color, size }) => (",
			"            <MaterialIcons name='${2:TabScreen1}' color={color} size={size} />",
			"          ),",
			"        }}",
			"      />",
			"      <Tab.Screen",
			"        name='${4:TabScreen2}'",
			"        component={${5:TabScreen2}}",
			"        options={{",
			"          tabBarLabel: '${4:TabScreen2}',",
			"          tabBarIcon: ({ color, size }) => (",
			"            <MaterialIcons name='${4:TabScreen2}' color={color} size={size} />",
			"          ),",
			"        }}",
			"      />",
			"      <Tab.Screen",
			"        name='${6:TabScreen3}'",
			"        component={${7:TabScreen3}}",
			"        options={{",
			"          tabBarLabel: '${6:TabScreen3}',",
			"          tabBarIcon: ({ color, size }) => (",
			"            <MaterialIcons name='${6:TabScreen3}' color={color} size={size} />",
			"          ),",
			"        }}",
			"      />",
			"      </Tab.Navigator>",
			"  );",
			"}",
			"",
			"const styles = StyleSheet.create({",
			"",
			"});"
		],
		"description": "React Native Tab Navigator"
	},
	"Paper Screen": {
		"prefix": "jh-ps",
		"body": [
			"import React, { useEffect, useState } from 'react';\r",
			"import {Avatar, Card, IconButton, FAB, Snackbar, TextInput, Dialog, Portal, Button, Text, Surface, Divider, Searchbar, useTheme } from \"react-native-paper\";\r",
			"import {View, Image, TouchableOpacity, StyleSheet, ScrollView, ActivityIndicator} from \"react-native\";\r",
			"// import { TouchableOpacity } from \"react-native-gesture-handler\";\r",
			"import { useIsFocused } from \"@react-navigation/native\";\r",
			"import { Dropdown } from \"react-native-paper-dropdown\";\r",
			"\r",
			"export default function ${1:${TM_FILENAME_BASE}}(props) {\r",
			"  return (\r",
			"    <Surface style={{flex:1, justifyContent: 'center', alignItems: 'center'}}>\r",
			"      <Text  variant='displaySmall'>${1:${TM_FILENAME_BASE}}</Text>\r",
			"    </Surface>\r",
			"  )\r",
			"}"
		],
		"description": "Paper Screen"
	},
	"RN App w Navigation": {
		"prefix": "jh-rnan",
		"body": [
			"import React from \"react\";\r",
			"import { View, Text, Button, StyleSheet } from \"react-native\";\r",
			"import { NavigationContainer } from \"@react-navigation/native\";\r",
			"import { StatusBar } from \"expo-status-bar\";\r",
			"import { SafeAreaProvider } from \"react-native-safe-area-context\";\r",
			"import { Provider as PaperProvider } from \"react-native-paper\";\r",
			"import RootNavigator from \"./navigation/RootNavigator\";\r",
			"\r",
			"export default function App() {\r",
			"  return (\r",
			"    <SafeAreaProvider>\r",
			"      <PaperProvider theme={theme}>\r",
			"        <NavigationContainer>\r",
			"          <RootNavigator />\r",
			"        </NavigationContainer>\r",
			"      </PaperProvider>\r",
			"      <StatusBar style=\"auto\" />\r",
			"    </SafeAreaProvider>\r",
			"  );\r",
			"}\r",
			"\r",
			"const styles = StyleSheet.create({});\r",
			"\r",
			"\r",
			"const theme = {\r",
			"  colors: {\r",
			"    primary: \"rgb(118, 0, 12)\",\r",
			"    onPrimary: \"rgb(255, 255, 255)\",\r",
			"    primaryContainer: \"rgb(255, 218, 214)\",\r",
			"    onPrimaryContainer: \"rgb(65, 0, 3)\",\r",
			"    secondary: \"rgb(156, 65, 60)\",\r",
			"    onSecondary: \"rgb(255, 255, 255)\",\r",
			"    secondaryContainer: \"rgb(255, 176, 169))\",\r",
			"    onSecondaryContainer: \"rgb(65, 0, 3)\",\r",
			"    tertiary: \"rgb(134, 83, 0)\",\r",
			"    onTertiary: \"rgb(255, 255, 255)\",\r",
			"    tertiaryContainer: \"rgb(255, 221, 185)\",\r",
			"    onTertiaryContainer: \"rgb(43, 23, 0)\",\r",
			"    error: \"rgb(186, 26, 26)\",\r",
			"    onError: \"rgb(255, 255, 255)\",\r",
			"    errorContainer: \"rgb(255, 218, 214)\",\r",
			"    onErrorContainer: \"rgb(65, 0, 2)\",\r",
			"    background: \"rgb(255, 251, 255)\",\r",
			"    onBackground: \"rgb(32, 26, 25)\",\r",
			"    surface: \"rgb(255, 251, 255)\",\r",
			"    onSurface: \"rgb(32, 26, 25)\",\r",
			"    surfaceVariant: \"rgb(118, 0, 12)\",\r",
			"    onSurfaceVariant: \"rgb(83, 67, 66)\",\r",
			"    outline: \"rgb(133, 115, 113)\",\r",
			"    outlineVariant: \"rgb(216, 194, 191)\",\r",
			"    shadow: \"rgb(0, 0, 0)\",\r",
			"    scrim: \"rgb(0, 0, 0)\",\r",
			"    inverseSurface: \"rgb(54, 47, 46)\",\r",
			"    inverseOnSurface: \"rgb(251, 238, 236)\",\r",
			"    inversePrimary: \"rgb(255, 179, 173)\",\r",
			"    elevation: {\r",
			"      level0: \"transparent\",\r",
			"      level1: \"rgb(252, 248, 248)\",\r",
			"      level2: \"rgb(241, 237, 236)\",\r",
			"      level3: \"rgb(246, 229, 232)\",\r",
			"      level4: \"rgb(245, 226, 230)\",\r",
			"      level5: \"rgb(244, 222, 226)\",\r",
			"    },\r",
			"    surfaceDisabled: \"rgba(32, 26, 25, 0.12)\",\r",
			"    onSurfaceDisabled: \"rgba(32, 26, 25, 0.38)\",\r",
			"    backdrop: \"rgba(59, 45, 44, 0.4)\",\r",
			"  },\r",
			"};"
		],
		"description": "React Native App with Navigation"
	},
	"Paper Button": {
		"prefix": "jh-pb",
		"body": [
			"<Button mode=\"${1:contained}\" icon=\"${2:update}\" onPress={() => ${3:handleDeleteTest()}}>\r",
			"  ${4:GoBack}\r",
			"</Button>"
		],
		"description": "Paper Button"
	},
	"useState": {
		"prefix": "jh-us",
		"body": [
			"const [$1, set${1/(.*)/${1:/capitalize}/}] = useState(${2:[]});"
		],
		"description": "useState"
	},
	"useEffect with Fetch Function": {
		"prefix": "jh-uef",
		"body": [
			"useEffect(() => {",
			"  const fetchData = async () => {",
			"    try {",
			"      const data = await fetch${1:Products}();",
			"      set${2:Products}(data);",
			"    } catch (err) {",
			"      console.error(err);",
			"      setOffline(true);",
			"      setError(\"Unable to fetch data, offline mode\");",
			"    }",
			"  };",
			"",
			"  fetchData();",
			"}, []);"
		],
		"description": "useEffect with fetch"
	},
	"Header Footer ScreenView": {
		"prefix": "jh-hfsv",
		"body": [
			"    <Surface style={{ flex: 1 }} mode=\"flat\" elevation={1}>\r",
			"      <View style={{}}>\r",
			"\r",
			"      </View>\r",
			"      <ScrollView style={{ flex: 1 }}>\r",
			"\r",
			"      </ScrollView>\r",
			"      <View style={{}}>\r",
			"\r",
			"      </View>\r",
			"    </Surface>"
		],
		"description": "Header Footer Screen View"
	},
	"Search Bar": {
		"prefix": "jh-sb",
		"body": [
			"<TextInput\r",
			"        placeholder=\"Search by product name\"\r",
			"        value={searchQuery}\r",
			"        onChangeText={(text) => setSearchQuery(text)}\r",
			"        mode=\"outlined\"\r",
			"        style={{ marginBottom: 10 }}\r",
			"      />"
		],
		"description": "Search Bar"
	},
	"Vertical 2 Buttons": {
		"prefix": "jh-v2b",
		"body": [
			"            <View>\r",
			"              <View\r",
			"                style={{\r",
			"                  flex: 1,\r",
			"                  flexDirection: \"column\",\r",
			"                  justifyContent: \"space-between\",\r",
			"                }}\r",
			"              >\r",
			"                <View\r",
			"                  style={{\r",
			"                    flex: 1,\r",
			"                    alignItems: \"center\",\r",
			"                    justifyContent: \"flex-end\",\r",
			"                  }}\r",
			"                >\r",
			"                  <IconButton icon=\"pencil\" mode=\"contained\" iconColor={theme.colors.onSecondary} size={24} onPress={() => { ${1:editFunction()} }} />\r",
			"                </View>\r",
			"                <View\r",
			"                  style={{\r",
			"                    flex: 1,\r",
			"                    alignItems: \"center\",\r",
			"                    justifyContent: \"flex-start\",\r",
			"                  }}\r",
			"                >\r",
			"                  <IconButton icon=\"delete\"  mode=\"contained\" iconColor={theme.colors.onSecondary} size={24} onPress={() => {${2:deleteFunction()} }} />\r",
			"                </View>\r",
			"              </View>\r",
			"            </View>"
		],
		"description": "Vertical 2 Buttons"
	},
	"Card 3 pans": {
		"prefix": "jh-c3p",
		"body": [
			"          <View\r",
			"            key={${1:category}.id}\r",
			"            style={{\r",
			"              flex: 1,\r",
			"              flexDirection: \"row\",\r",
			"              marginHorizontal: 10,\r",
			"              marginTop: 10,\r",
			"              backgroundColor: theme.colors.elevation.level2,\r",
			"              alignItems: \"center\",\r",
			"              borderRadius: 5,\r",
			"            }}\r",
			"          >\r",
			"            <View style={{ alignItems: \"center\", justifyContent: \"center\", paddingLeft:10 }}>\r",
			"            { /* Avatar */}\r",
			"            </View>\r",
			"            <View style={{ flex: 1, marginLeft: 10, padding: 10 }}>\r",
			"            { /* Main Content */}\r",
			"            </View>\r",
			"            <View>\r",
			"            { /* Action Buttons */}\r",
			"            </View>\r",
			"          </View>"
		],
		"description": "Card 3 pans"
	},
	"Avatar": {
		"prefix": "jh-avatar",
		"body": [
			"              <TouchableOpacity onPress={() => ${1:viewFunction()}}>\r",
			"                <Avatar.Icon size={48} icon=\"folder-open-outline\" />\r",
			"              </TouchableOpacity>"
		],
		"description": "Avatar"
	},
	"TextInput": {
		"prefix": "jh-input",
		"body": [
			"        <TextInput style={{marginBottom:10, marginHorizontal:10}} placeholder=\"Search by staff name\" mode=\"outlined\" />"
		],
		"description": "TextInput"
	},
	"Text": {
		"prefix": "jh-text",
		"body": [
			"<Text variant=\"titleMedium\">{${1:product}.name}</Text>"
		],
		"description": "Text"
	},
	"IconButton": {
		"prefix": "jh-ib",
		"body": [
			"<IconButton icon=\"pencil\" size={24} onPress={() => {}} />"
		],
		"description": "IconButton"
	},
	"Button": {
		"prefix": "jh-bt",
		"body": [
			"            <Button mode=\"contained\" icon=\"update\">\r",
			"              Ok\r",
			"            </Button>"
		],
		"description": "Button"
	},
	"map": {
		"prefix": "jh-map",
		"body": [
			"      {${1:products}.map((${2:product}) => (\r",
			"      ))}"
		],
		"description": "map"
	},
	"Import": {
		"prefix": "jh-imp",
		"body": [
			"import React, { useEffect, useState } from \"react\";\r",
			"import { View, StyleSheet, ScrollView } from \"react-native\";\r",
			"import {\r",
			"  Avatar,\r",
			"  Text,\r",
			"  Surface,\r",
			"  TextInput,\r",
			"  Button,\r",
			"  IconButton,\r",
			"  Divider,\r",
			"  Searchbar,\r",
			"} from \"react-native-paper\";"
		],
		"description": "Import"
	},
	"Form": {
		"prefix": "jh-form",
		"body": [
			"      <Surface\r",
			"        elevation={5}\r",
			"        style={{\r",
			"          flex: 1,\r",
			"          padding: 16,\r",
			"        }}\r",
			"      >\r",
			"        <ScrollView style={{ flex: 1 }}>\r",
			"          <TextInput\r",
			"            label=\"${3:Label}\"\r",
			"            value={${2:dataname}.${4:field1}}\r",
			"            onChangeText={(text) => set${1:Function}({ ...${2:dataname}, ${4:field1}: text })}\r",
			"            mode=\"outlined\"\r",
			"            keyboardType=\"numeric\"\r",
			"            style={{ marginBottom: 16 }}\r",
			"          />\r",
			"          <TextInput\r",
			"            label=\"${5:Label}\"\r",
			"            value={${2:dataname}.${6:field1}}\r",
			"            onChangeText={(text) => set${1:Function}({ ...${2:dataname}, ${6:field1}: text })}\r",
			"            mode=\"outlined\"\r",
			"            keyboardType=\"numeric\"\r",
			"            style={{ marginBottom: 16 }}\r",
			"          />\r",
			"          <TextInput\r",
			"            label=\"${7:Label}\"\r",
			"            value={${2:dataname}.${8:field1}}\r",
			"            onChangeText={(text) => set${1:Function}({ ...${2:dataname}, ${8:field1}: text })}\r",
			"            mode=\"outlined\"\r",
			"            keyboardType=\"numeric\"\r",
			"            style={{ marginBottom: 16 }}\r",
			"          />\r",
			"          <TextInput\r",
			"            label=\"${9:Label}\"\r",
			"            value={${2:dataname}.${10:field1}}\r",
			"            onChangeText={(text) => set${1:Function}({ ...${2:dataname}, ${10:field1}: text })}\r",
			"            mode=\"outlined\"\r",
			"            keyboardType=\"numeric\"\r",
			"            style={{ marginBottom: 16 }}\r",
			"          />\r",
			"          <TextInput\r",
			"            label=\"${11:Label}\"\r",
			"            value={${2:dataname}.${12:field1}}\r",
			"            onChangeText={(text) => set${1:Function}({ ...${2:dataname}, ${12:field1}: text })}\r",
			"            mode=\"outlined\"\r",
			"            keyboardType=\"numeric\"\r",
			"            style={{ marginBottom: 16 }}\r",
			"          />\r",
			"          <TextInput\r",
			"            label=\"${13:Label}\"\r",
			"            value={${2:dataname}.${14:field1}}\r",
			"            onChangeText={(text) => set${1:Function}({ ...${2:dataname}, ${14:field1}: text })}\r",
			"            mode=\"outlined\"\r",
			"            keyboardType=\"numeric\"\r",
			"            style={{ marginBottom: 16 }}\r",
			"          />\r",
			"          <TextInput\r",
			"            label=\"${15:Label}\"\r",
			"            value={${2:dataname}.${16:field1}}\r",
			"            onChangeText={(text) => set${1:Function}({ ...${2:dataname}, ${16:field1}: text })}\r",
			"            mode=\"outlined\"\r",
			"            keyboardType=\"numeric\"\r",
			"            style={{ marginBottom: 16 }}\r",
			"          />\r",
			"          <TextInput\r",
			"            label=\"${17:Label}\"\r",
			"            value={${2:dataname}.${18:field1}}\r",
			"            onChangeText={(text) => set${1:Function}({ ...${2:dataname}, ${18:field1}: text })}\r",
			"            mode=\"outlined\"\r",
			"            keyboardType=\"numeric\"\r",
			"            style={{ marginBottom: 16 }}\r",
			"          />\r",
			"        </ScrollView>\r",
			"      </Surface>"
		],
		"description": "Form"
	},
	"Base URL": {
		"prefix": "jh-burl",
		"body": [
			"const API_BASE_URL = \"http://localhost:3000/api\";"
		],
		"description": "Base URL"
	},
	"Fetch": {
		"prefix": "jh-f",
		"body": [
			"export async function fetch${1:Categories}() {",
			"  try {",
			"    const response = await fetch(`\\${API_BASE_URL}/${2:Categories}`);",
			"    if (!response.ok) throw new Error('Failed to fetch ${1:Categories}');",
			"    return await response.json();",
			"  } catch (error) {",
			"    throw error;",
			"  }",
			"}"
		],
		"description": "Fetch"
	},
	"Fetch By ID": {
		"prefix": "jh-fbi",
		"body": [
			"export async function fetch${1:Product}ById(id) {",
			"  try {",
			"    const response = await fetch(`\\${API_BASE_URL}/${2:Product}/\\${id}`);",
			"    if (!response.ok) throw new Error('Failed to fetch ${1:Product}');",
			"    return await response.json();",
			"  } catch (error) {",
			"    throw error;",
			"  }",
			"}"
		],
		"description": "Fetch By ID"
	},
	"Fetch Add": {
		"prefix": "jh-fa",
		"body": [
			"export async function add${1:Product}(${2:productData}) {",
			"  try {",
			"    const response = await fetch(`\\${API_BASE_URL}/${3:Product}`, {",
			"      method: 'POST',",
			"      headers: { 'Content-Type': 'application/json' },",
			"      body: JSON.stringify(${2:productData}),",
			"    });",
			"    if (!response.ok) throw new Error('Failed to add ${1:Product}');",
			"    return await response.json();",
			"  } catch (error) {",
			"    throw error;",
			"  }",
			"}"
		],
		"description": "Fetch Add"
	},
	"Fetch Update": {
		"prefix": "jh-fu",
		"body": [
			"export async function update${1:Product}(id, ${2:updatedData}) {",
			"  try {",
			"    const response = await fetch(`\\${API_BASE_URL}/${3:Product}/\\${id}`, {",
			"      method: 'PUT',",
			"      headers: { 'Content-Type': 'application/json' },",
			"      body: JSON.stringify(${2:updatedData}),",
			"    });",
			"    if (!response.ok) throw new Error('Failed to update ${1:Product}');",
			"    return await response.json();",
			"  } catch (error) {",
			"    throw error;",
			"  }",
			"}"
		],
		"description": "Fetch Update"
	},
	"Fetch Delete": {
		"prefix": "jh-fd",
		"body": [
			"export async function delete${1:Product}(id) {",
			"  try {",
			"    const response = await fetch(`\\${API_BASE_URL}/${2:Product}/\\${id}`, {",
			"      method: 'DELETE',",
			"    });",
			"    if (!response.ok) throw new Error('Failed to delete ${1:Product}');",
			"    return true;",
			"  } catch (error) {",
			"    throw error;",
			"  }",
			"}"
		],
		"description": "Fetch Delete"
	},
	"Show Screen": {
		"prefix": "jh-ss",
		"body": [
			"  function show${1:Screen}(id) {\r",
			"    props.navigation.navigate(\"${2:Screen}\", { id: id });\r",
			"  }"
		],
		"description": "Show Screen"
	},
	"handleSubmit": {
		"prefix": "jh-hs",
		"body": [
			"  async function handleSubmit() {\r",
			"    try {\r",
			"      const updatedPerson = { ...person, departmentId: selectedDepartment };",
			"      if (id === -1) {\r",
			"        await addPerson(updatedPerson);\r",
			"      } else {\r",
			"        await updatePerson(id, updatedPerson);\r",
			"      }\r",
			"      props.navigation.goBack();\r",
			"    } catch (err) {\r",
			"      console.error(err);\r",
			"      setError(\"Failed to save data.\");\r",
			"    }\r",
			"  };"
		],
		"description": "handleSubmit"
	},
	"handleSubmitTest": {
		"prefix": "jh-hst",
		"body": [
			"  async function handleSubmitTest() {\r",
			"    try {\r",
			"      if (id === -1) {\r",
			"        await addPerson({\r",
			"          name: \"New Person\",\r",
			"          phone: \"1234567890\",\r",
			"          departmentId: 1,\r",
			"          street: \"123 Main St\",\r",
			"          city: \"Anytown\",\r",
			"          state: \"ST\",\r",
			"          zip: \"12345\",\r",
			"          country: \"US\",\r",
			"        });\r",
			"      } else {\r",
			"        await updatePerson(id, { ...person, name: person.name + \" Updated\" });\r",
			"      }\r",
			"      props.navigation.goBack();\r",
			"    } catch (err) {\r",
			"      console.error(err);\r",
			"      setError(\"Failed to save data.\");\r",
			"    }\r",
			"  }"
		],
		"description": "handleSubmitTest"
	},
	"Delete Dialog": {
		"prefix": "jh-delete-dialog",
		"body": [
			"      {/* Dialog for delete confirmation */}\r",
			"      <Portal>\r",
			"        <Dialog visible={visible} onDismiss={hideDialog}>\r",
			"          <Dialog.Title>Confirm Deletion</Dialog.Title>\r",
			"          <Dialog.Content>\r",
			"            <Text>Are you sure you want to delete?</Text>\r",
			"            <Text style={{ fontWeight: \"bold\" }}>{${1:selectedPersonName}}</Text>\r",
			"          </Dialog.Content>\r",
			"          <Dialog.Actions>\r",
			"            <Button onPress={hideDialog}>Cancel</Button>\r",
			"            <Button onPress={handleDelete}>Delete</Button>\r",
			"          </Dialog.Actions>\r",
			"        </Dialog>\r",
			"      </Portal>"
		],
		"description": "Delete Dialog"
	},
	"FAB Button": {
		"prefix": "jh-fab",
		"body": [
			"      {/* Add FAB Button */}\r",
			"      <FAB\r",
			"        icon=\"plus\"\r",
			"        onPress={() => ${1:showAddProduct}()}\r",
			"        disabled={offline}\r",
			"        style={{ position: \"absolute\", margin: 16, right: 0, bottom: 0 }}\r",
			"      />"
		],
		"description": "FAB Button"
	},
	"Region": {
		"prefix": "jh-r",
		"body": [
			"  // #region Name\r",
			"  // #endregion"
		],
		"description": "Region"
	},
	"handleDelete": {
		"prefix": "jh-hd",
		"body": [
			"  async function handleDelete() {\r",
			"    if (selectedPersonId !== null) {\r",
			"      try {\r",
			"        const success = await deletePerson(selectedPersonId);\r",
			"        if (success) {\r",
			"          fetchData();\r",
			"          hideDialog();\r",
			"        } else {\r",
			"          setError(\"Failed to delete. Please try again.\");\r",
			"        }\r",
			"      } catch (err) {\r",
			"        console.error(\"Error deleting:\", err);\r",
			"        setError(\"Failed to delete. Check your connection.\");\r",
			"        hideDialog();\r",
			"      }\r",
			"    }\r",
			"  }"
		],
		"description": "handleDelete"
	},
	"handleDeleteTest": {
		"prefix": "jh-hdt",
		"body": [
			"  async function handleDeleteTest() {\r",
			"    const lastPerson = people[people.length - 1].id;\r",
			"    try {\r",
			"      const success = await deletePerson(lastPerson);\r",
			"      if (success) {\r",
			"        fetchData();\r",
			"      } else {\r",
			"        setError(\"Failed to delete. Please try again.\");\r",
			"      }\r",
			"    } catch (err) {\r",
			"      console.error(\"Error deleting:\", err);\r",
			"      setError(\"Failed to delete. Check your connection.\");\r",
			"    }\r",
			"  }"
		],
		"description": "handleDeleteTest"
	},
	"showDialog": {
		"prefix": "jh-sdlg",
		"body": [
			"function showDialog(id, name) {\r",
			"    setSelectedPersonId(id);\r",
			"    setSelectedPersonName(name);\r",
			"    setVisible(true);\r",
			"  }"
		],
		"description": "showDialog"
	},
	"hideDialog": {
		"prefix": "jh-hdlg",
		"body": [
			"  function hideDialog() {\r",
			"    setVisible(false);\r",
			"    setSelectedPersonId(null);\r",
			"  }"
		],
		"description": "hideDialog"
	},
	"Headline Text": {
		"prefix": "jh-headline-text",
		"body": [
			"        <Text\r",
			"          variant=\"headlineLarge\"\r",
			"          style={{\r",
			"            marginHorizontal: 10,\r",
			"            marginBottom: 24,\r",
			"            fontWeight: \"bold\",\r",
			"            color: theme.colors.primary,\r",
			"          }}\r",
			"        >\r",
			"          ${1:headline}\r",
			"        </Text>"
		],
		"description": "Headline Text"
	},
	"Divider": {
		"prefix": "jh-divider",
		"body": [
			"<Divider style={{ marginVertical: 16 }} />"
		],
		"description": "Divider"
	},
	"View Form": {
		"prefix": "jh-view-phone-address",
		"body": [
			"        <View style={{ flex: 1, marginTop: 24 }}>\r",
			"          {[\r",
			"            { label: \"Phone:\", value: ${1:recordName}.phone },\r",
			"            { label: \"Street:\", value: ${1:recordName}.street },\r",
			"            { label: \"City:\", value: ${1:recordName}.city },\r",
			"            { label: \"State:\", value: ${1:recordName}.state },\r",
			"            { label: \"Zip:\", value: ${1:recordName}.zip },\r",
			"            { label: \"Country:\", value: ${1:recordName}.country },\r",
			"            { label: \"Department:\", value: ${1:recordName}.Department?.name },\r",
			"          ].map(({ label, value }, index) => (\r",
			"            <View\r",
			"              key={index}\r",
			"              style={{ marginBottom: 20, paddingHorizontal: 12 }}\r",
			"            >\r",
			"              <Text\r",
			"                variant=\"bodyMedium\"\r",
			"                style={{\r",
			"                  fontWeight: \"bold\",\r",
			"                  marginBottom: 6,\r",
			"                  color: \"#5D5D5D\",\r",
			"                  fontSize: 16,\r",
			"                }}\r",
			"              >\r",
			"                {label}\r",
			"              </Text>\r",
			"              <Text\r",
			"                variant=\"bodyMedium\"\r",
			"                style={{\r",
			"                  color: \"#2C3E50\",\r",
			"                  fontSize: 14,\r",
			"                  lineHeight: 22,\r",
			"                  paddingBottom: 10,\r",
			"                  borderBottomWidth: 1,\r",
			"                  borderBottomColor: \"#BDC3C7\",\r",
			"                }}\r",
			"              >\r",
			"                {value}\r",
			"              </Text>\r",
			"            </View>\r",
			"          ))}\r",
			"        </View>"
		],
		"description": "View Form"
	},
	"Go Back": {
		"prefix": "jh-go-back",
		"body": [
			"<View style={{ padding: 10 }}>\r",
			"        <Button\r",
			"          mode=\"contained\"\r",
			"          icon=\"keyboard-return\"\r",
			"          onPress={${1:goBackFunction}}\r",
			"          style={{\r",
			"            width: \"100%\",\r",
			"          }}\r",
			"        >\r",
			"          Go Back\r",
			"        </Button>\r",
			"      </View>\r",
			""
		],
		"description": "Go Back"
	},
	"Edit Form": {
		"prefix": "jh-edit-phone-address-department",
		"body": [
			"     <ScrollView style={{ flex: 1 }} contentContainerStyle={{ paddingBottom: 34 }}>",
			"       <TextInput\r",
			"          label=\"Name\"\r",
			"          value={person.name}\r",
			"          onChangeText={(text) => ${1:recordUpdater}({ ...${2:recordName}, name: text })}\r",
			"          mode=\"outlined\"\r",
			"          keyboardType=\"numeric\"\r",
			"          style={{ marginBottom: 16 }}\r",
			"        />\r",
			"        <TextInput\r",
			"          label=\"Phone\"\r",
			"          value={person.phone}\r",
			"          onChangeText={(text) => ${1:recordUpdater}({ ...${2:recordName}, phone: text })}\r",
			"          mode=\"outlined\"\r",
			"          keyboardType=\"numeric\"\r",
			"          style={{ marginBottom: 16 }}\r",
			"        />\r",
			"        <TextInput\r",
			"          label=\"Street\"\r",
			"          value={person.street}\r",
			"          onChangeText={(text) => ${1:recordUpdater}({ ...${2:recordName}, street: text })}\r",
			"          mode=\"outlined\"\r",
			"          keyboardType=\"numeric\"\r",
			"          style={{ marginBottom: 16 }}\r",
			"        />\r",
			"        <TextInput\r",
			"          label=\"City\"\r",
			"          value={person.city}\r",
			"          onChangeText={(text) => ${1:recordUpdater}({ ...${2:recordName}, city: text })}\r",
			"          mode=\"outlined\"\r",
			"          keyboardType=\"numeric\"\r",
			"          style={{ marginBottom: 16 }}\r",
			"        />\r",
			"        <TextInput\r",
			"          label=\"Zip\"\r",
			"          value={person.zip}\r",
			"          onChangeText={(text) => ${1:recordUpdater}({ ...${2:recordName}, zip: text })}\r",
			"          mode=\"outlined\"\r",
			"          keyboardType=\"numeric\"\r",
			"          style={{ marginBottom: 16 }}\r",
			"        />\r",
			"        <TextInput\r",
			"          label=\"Country\"\r",
			"          value={person.country}\r",
			"          onChangeText={(text) => ${1:recordUpdater}({ ...${2:recordName}, country: text })}\r",
			"          mode=\"outlined\"\r",
			"          keyboardType=\"numeric\"\r",
			"          style={{ marginBottom: 16 }}\r",
			"        />\r",
			"        <TextInput\r",
			"          label=\"State\"\r",
			"          value={person.state}\r",
			"          onChangeText={(text) => ${1:recordUpdater}({ ...${2:recordName}, state: text })}\r",
			"          mode=\"outlined\"\r",
			"          keyboardType=\"numeric\"\r",
			"          style={{ marginBottom: 16 }}\r",
			"        />\r",
			"        <Dropdown\r",
			"          label=\"${7:dropdown Title}\"\r",
			"          mode=\"outlined\"\r",
			"          value={${3:dropdownValue}}\r",
			"          onSelect={${4:dropdownValueUpdater}}\r",
			"          options={${5:dropdownArray}.map((${6:dropdownElement}) => ({\r",
			"            label: ${6:dropdownElement}.name,\r",
			"            value: ${6:dropdownElement}.id,\r",
			"          }))}\r",
			"        />",
			"      </ScrollView>"
		],
		"description": "123"
	},
	"Horizontal 2 Buttons": {
		"prefix": "jh-horizontal-2-buttons",
		"body": [
			"      <View\r",
			"        style={{\r",
			"          flexDirection: \"row\",\r",
			"          justifyContent: \"space-between\",\r",
			"          padding: 10,\r",
			"        }}\r",
			"      >\r",
			"        <View style={{ flex: 1, marginHorizontal: 10 }}>\r",
			"          <Button\r",
			"            mode=\"outlined\"\r",
			"            icon=\"keyboard-return\"\r",
			"            onPress={${1:cancelFunction}\r",
			"          >\r",
			"            Cancel\r",
			"          </Button>\r",
			"        </View>\r",
			"        <View style={{ flex: 1, marginHorizontal: 10 }}>\r",
			"          <Button mode=\"contained\" icon=\"update\" onPress={${2:submitFunction}}>\r",
			"            Ok\r",
			"          </Button>\r",
			"        </View>\r",
			"      </View>"
		],
		"description": "Horizontal 2 Buttons"
	}
}